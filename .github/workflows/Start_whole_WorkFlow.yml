name: Start whole WorkFlow

on:
  workflow_dispatch:    # manual trigger

permissions:
  actions: write
  contents: read

jobs:
  workflow-initiator:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout

    steps:
      - name: Start RDP Workflow
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üöÄ Webhook-triggered RDP start workflow initiated"
          
          # Function to send Telegram notification
          send_telegram_notification() {
              local message="$1"
              
              if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
                  echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
                  return 1
              fi
              
              echo "üì± Sending Telegram notification: $message"
              
              if curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                   -d "chat_id=${TELEGRAM_CHAT_ID}" \
                   -d "text=${message}" \
                   -d "parse_mode=Markdown" > /dev/null 2>&1; then
                  echo "‚úÖ Telegram notification sent successfully"
                  return 0
              else
                  echo "‚ùå Failed to send Telegram notification"
                  return 1
              fi
          }
          
          # Function to trigger Call RDP email workflow
          trigger_call_rdp_email() {
              echo "üîÅ Triggering Call RDP email workflow..."
              
              # Get the latest Call RDP email workflow run
              run_id=$(gh run list \
                --workflow "Call RDP email" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")

              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üîÅ Rerunning Call RDP email run ID: $run_id"
                  if gh run rerun $run_id --repo "${{ github.repository }}"; then
                      echo "‚úÖ Call RDP email workflow triggered successfully"
                      send_telegram_notification "üöÄ *RDP Workflow Started*\\n\\nCall RDP email workflow has been triggered. RDP setup will begin shortly."
                      return 0
                  else
                      echo "‚ùå Failed to trigger Call RDP email workflow"
                      send_telegram_notification "‚ùå *RDP Workflow Trigger Failed*\\n\\nFailed to trigger Call RDP email workflow. Manual intervention required."
                      return 1
                  fi
              else
                  echo "‚ùå No Call RDP email workflow found to rerun"
                  send_telegram_notification "‚ùå *RDP Workflow Not Found*\\n\\nNo Call RDP email workflow found to trigger."
                  return 1
              fi
          }
          
          # Directly trigger RDP workflow (no more polling needed)
          echo "üöÄ start_rdp command received via webhook - triggering RDP workflows"
          if trigger_call_rdp_email; then
              echo "üèÅ Start workflow completed successfully"
              exit 0  # Success - don't trigger on.yml
          else
              echo "‚ùå Failed to trigger RDP workflows"
              exit 1
          fi

      - name: Fallback - Trigger on.yml workflow
        if: failure()  # Only run if start workflow failed
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÑ RDP trigger failed, triggering on.yml workflow as fallback"
          
          # Get the latest on.yml workflow run
          run_id=$(gh run list \
            --workflow "on" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")

          if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
              echo "üîÅ Rerunning on workflow run ID: $run_id"
              gh run rerun $run_id --repo "${{ github.repository }}"
              echo "‚úÖ on.yml workflow rerun triggered"
          else
              echo "‚ùå No on.yml workflow found to rerun"
          fi

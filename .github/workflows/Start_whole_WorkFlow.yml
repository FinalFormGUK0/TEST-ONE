name: Start whole WorkFlow

on:
  workflow_dispatch:    # manual trigger

permissions:
  actions: write
  contents: read

jobs:
  workflow-initiator:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout

    steps:
      - name: Start RDP Workflow
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üöÄ Webhook-triggered RDP start workflow initiated"
          
          # Function to send Telegram notification
          send_telegram_notification() {
              local message="$1"
              local max_retries=3
              local retry_count=0
              
              if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
                  echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
                  return 1
              fi
              
              while [ $retry_count -lt $max_retries ]; do
                  echo "üì± Attempt $((retry_count + 1)): Sending Telegram notification"
                  
                  response=$(curl -s -w "%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                       -d "chat_id=${TELEGRAM_CHAT_ID}" \
                       -d "text=${message}" \
                       -d "parse_mode=Markdown" \
                       -d "disable_web_page_preview=true")
                  
                  http_code="${response: -3}"
                  
                  if [ "$http_code" = "200" ]; then
                      echo "‚úÖ Telegram notification sent successfully"
                      return 0
                  else
                      echo "‚ùå Failed to send notification (HTTP: $http_code)"
                      if [ $retry_count -lt $((max_retries - 1)) ]; then
                          echo "‚è≥ Retrying in 3 seconds..."
                          sleep 3
                      fi
                  fi
                  retry_count=$((retry_count + 1))
              done
              
              echo "‚ùå Failed to send Telegram notification after $max_retries attempts"
              return 1
          }
          
          # Function to trigger Call RDP email workflow
          trigger_call_rdp_email() {
              echo "üîÅ Triggering Call RDP email workflow..."
              
              # Get the latest Call RDP email workflow run
              run_id=$(gh run list \
                --workflow "Call RDP email" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")

              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üîÅ Rerunning Call RDP email run ID: $run_id"
                  if gh run rerun $run_id --repo "${{ github.repository }}"; then
                      echo "‚úÖ Call RDP email workflow triggered successfully"
                      send_telegram_notification "üöÄ *RDP Workflow Started*\\n\\n‚úÖ Call RDP email workflow triggered\\n‚úÖ RDP server setup initiated\\n\\nüìß *Next:* Wait for email with RDP credentials\\nüîó *Monitor:* [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
                      return 0
                  else
                      echo "‚ùå Failed to trigger Call RDP email workflow"
                      send_telegram_notification "‚ùå *RDP Workflow Failed*\\n\\n‚ùå Failed to trigger Call RDP email workflow\\n\\nüîß *Action:* Check [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\nüîÑ *Fallback:* Trying alternative startup method..."
                      return 1
                  fi
              else
                  echo "‚ùå No Call RDP email workflow found to rerun"
                  send_telegram_notification "‚ùå *RDP Workflow Not Found*\\n\\n‚ö†Ô∏è No Call RDP email workflow available\\n\\nüîß *Solution:* Try running workflows manually from [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
                  return 1
              fi
          }
                    
          echo "‚è≥ Waiting for start_rdp message (max 6h)..."
          
          MAX_WAIT=$((360 * 60 - 300))  # wait 5h55m (leave 5 min buffer before GitHub kills job)
          INTERVAL=60                   # check every 1 min
          waited=0
          message_received=false
          
          while [ $waited -lt $MAX_WAIT ]; do
              # Poll Telegram for /start_rdp command
              updates=$(curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?offset=-1")
              
              if echo "$updates" | grep -q "\"text\":\"/start_rdp\""; then
                  echo "üöÄ /start_rdp command detected from Telegram!"
                  message_received=true
                  break
              fi
          
              echo "‚è≥ Still waiting... ($waited seconds elapsed)"
              sleep $INTERVAL
              waited=$((waited + INTERVAL))
          done



          
          if [ "$message_received" = true ]; then
              echo "‚úÖ Triggering Call RDP email workflow..."
              run_id=$(gh run list \
                --workflow "Call RDP email" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")
          
              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üîÅ Rerunning Call RDP email run ID: $run_id"
                  gh run rerun $run_id --repo "${{ github.repository }}"
              else
                  echo "‚ùå No Call RDP email workflow found to rerun"
              fi
          else
              echo "‚ö†Ô∏è No start_rdp received before timeout, triggering on.yml fallback..."
              run_id=$(gh run list \
                --workflow "on" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")
          
              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üîÅ Rerunning on workflow run ID: $run_id"
                  gh run rerun $run_id --repo "${{ github.repository }}"
                  echo "‚úÖ on.yml workflow rerun triggered"
              else
                  echo "‚ùå No on.yml workflow found to rerun"
              fi
          fi


     

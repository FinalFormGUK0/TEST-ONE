name: Call RDP email

on:
  workflow_dispatch:    # manual trigger
  
permissions:
  actions: write
  contents: read

jobs:
  trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Decide trigger type
        id: context
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "trigger_type=scheduled" >> "$GITHUB_OUTPUT"
          else
            echo "trigger_type=manual" >> "$GITHUB_OUTPUT"
          fi

      - name: Get last run ID of RDP email
        id: last_run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          run_id=$(gh run list \
            --workflow "RDP email" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")
          echo "last_run_id=$run_id" >> "$GITHUB_OUTPUT"

      - name: Get last run ID of Stand by
        id: standby_run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          run_id=$(gh run list \
            --workflow "Stand by" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")
          echo "standby_run_id=$run_id" >> "$GITHUB_OUTPUT"

      
      - name: Rerun RDP email workflow
        if: steps.last_run.outputs.last_run_id != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Rerunning RDP email workflow run ID: ${{ steps.last_run.outputs.last_run_id }}"
          gh run rerun ${{ steps.last_run.outputs.last_run_id }} --repo "${{ github.repository }}"
      
      - name: Rerun Stand by workflow
        if: steps.standby_run.outputs.standby_run_id != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Rerunning Stand by workflow run ID: ${{ steps.standby_run.outputs.standby_run_id }}"
          gh run rerun ${{ steps.standby_run.outputs.standby_run_id }} --repo "${{ github.repository }}"

      - name: Send RDP Trigger Notification
        if: always()  # Send notification regardless of workflow status
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üì± Sending RDP trigger notification via Telegram..."
          
          # Check if Telegram credentials are configured
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
              echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
              exit 0
          fi
          
          # Send notification using Telegram API
          message="üöÄ *RDP Successfully Triggered*\n\nRDP workflows have been successfully triggered. Please wait for the RDP access codes to be sent to your email. The system will monitor for 6 hours or until you send 'Stop_rdp' via Telegram."
          
          if curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
               -d "chat_id=${TELEGRAM_CHAT_ID}" \
               -d "text=${message}" \
               -d "parse_mode=Markdown" > /dev/null 2>&1; then
              echo "‚úÖ RDP trigger notification sent successfully via Telegram"
          else
              echo "‚ö†Ô∏è Failed to send trigger notification via Telegram (non-critical)"
          fi

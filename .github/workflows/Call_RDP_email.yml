name: Call RDP email

on:
  workflow_dispatch:    # manual trigger
  
permissions:
  actions: write
  contents: read

jobs:
  trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Decide trigger type
        id: context
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "trigger_type=scheduled" >> "$GITHUB_OUTPUT"
          else
            echo "trigger_type=manual" >> "$GITHUB_OUTPUT"
          fi

      - name: Get last run ID of RDP email
        id: last_run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          run_id=$(gh run list \
            --workflow "RDP email" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")
          echo "last_run_id=$run_id" >> "$GITHUB_OUTPUT"

      - name: Get last run ID of Stand by
        id: standby_run
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          run_id=$(gh run list \
            --workflow "Stand by" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")
          echo "standby_run_id=$run_id" >> "$GITHUB_OUTPUT"

      
      - name: Rerun RDP email workflow
        if: steps.last_run.outputs.last_run_id != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Rerunning RDP email workflow run ID: ${{ steps.last_run.outputs.last_run_id }}"
          gh run rerun ${{ steps.last_run.outputs.last_run_id }} --repo "${{ github.repository }}"
      
      - name: Rerun Stand by workflow
        if: steps.standby_run.outputs.standby_run_id != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Rerunning Stand by workflow run ID: ${{ steps.standby_run.outputs.standby_run_id }}"
          gh run rerun ${{ steps.standby_run.outputs.standby_run_id }} --repo "${{ github.repository }}"

      - name: Send RDP Trigger Notification
        if: always()  # Send notification regardless of workflow status
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üì± Sending RDP trigger notification via Telegram..."
          
          # Check if Telegram credentials are configured
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
              echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
              exit 0
          fi
          
          # Function to send Telegram notification with retry logic
          send_telegram_notification() {
              local message="$1"
              local max_retries=3
              local retry_count=0
              
              while [ $retry_count -lt $max_retries ]; do
                  echo "üì± Attempt $((retry_count + 1)): Sending Telegram notification"
                  
                  response=$(curl -s -w "%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                       -d "chat_id=${TELEGRAM_CHAT_ID}" \
                       -d "text=${message}" \
                       -d "parse_mode=Markdown" \
                       -d "disable_web_page_preview=true")
                  
                  http_code="${response: -3}"
                  response_body="${response%???}"
                  
                  if [ "$http_code" = "200" ]; then
                      echo "‚úÖ Telegram notification sent successfully"
                      return 0
                  else
                      echo "‚ùå Failed to send notification (HTTP: $http_code)"
                      if [ $retry_count -lt $((max_retries - 1)) ]; then
                          echo "‚è≥ Retrying in 5 seconds..."
                          sleep 5
                      fi
                  fi
                  retry_count=$((retry_count + 1))
              done
              
              echo "‚ùå Failed to send Telegram notification after $max_retries attempts"
              return 1
          }
          
          # Determine workflow status
          rdp_status="${{ steps.last_run.outputs.last_run_id != '' && 'success' || 'failed' }}"
          standby_status="${{ steps.standby_run.outputs.standby_run_id != '' && 'success' || 'failed' }}"
          
          # Create detailed status message
          if [ "$rdp_status" = "success" ] && [ "$standby_status" = "success" ]; then
              message="üöÄ *RDP Successfully Triggered*\n\n‚úÖ RDP Server: Starting up\n‚úÖ Monitoring: Active for 6 hours\n\nüìß *Next Steps:*\n‚Ä¢ RDP credentials will be sent to your email\n‚Ä¢ Wait for email with connection details\n‚Ä¢ Use Tailscale IP to connect\n\nüõë *To Stop:* Send \`Stop_rdp\` to this chat\n\nüîó *GitHub Actions:* [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          else
              message="‚ùå *RDP Trigger Failed*\n\n"
              if [ "$rdp_status" = "failed" ]; then
                  message="${message}‚ùå RDP Server: Failed to start\n"
              fi
              if [ "$standby_status" = "failed" ]; then
                  message="${message}‚ùå Monitoring: Failed to start\n"
              fi
              message="${message}\nüîß *Action Required:* Check [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details"
          fi
          
          # Send the notification
          send_telegram_notification "$message"

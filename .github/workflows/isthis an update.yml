# Polling-based RDP Start Monitor Workflow
# This workflow actively polls Telegram for "Start_rdp" commands
# and triggers the RDP setup process when detected.
# Monitor runs for 6 hours with 30-second polling intervals.

name: Start whole WorkFlow

on:
  workflow_dispatch:    # manual trigger

permissions:
  actions: write
  contents: read

jobs:
  workflow-initiator:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout

    steps:
      - name: Monitor for Start RDP Command
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "üîç Starting polling-based monitoring for 'Start_rdp' command"
          echo "üì± Listening for Telegram commands..."
          
          # Function to send Telegram notification
          send_telegram_notification() {
              local message="$1"
              local max_retries=3
              local retry_count=0
              
              if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
                  echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
                  return 1
              fi
              
              while [ $retry_count -lt $max_retries ]; do
                  echo "üì± Attempt $((retry_count + 1)): Sending Telegram notification"
                  
                  response=$(curl -s -w "%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                       -d "chat_id=${TELEGRAM_CHAT_ID}" \
                       -d "text=${message}" \
                       -d "parse_mode=Markdown" \
                       -d "disable_web_page_preview=true")
                  
                  http_code="${response: -3}"
                  
                  if [ "$http_code" = "200" ]; then
                      echo "‚úÖ Telegram notification sent successfully"
                      return 0
                  else
                      echo "‚ùå Failed to send notification (HTTP: $http_code)"
                      if [ $retry_count -lt $((max_retries - 1)) ]; then
                          echo "‚è≥ Retrying in 3 seconds..."
                          sleep 3
                      fi
                  fi
                  retry_count=$((retry_count + 1))
              done
              
              echo "‚ùå Failed to send Telegram notification after $max_retries attempts"
              return 1
          }
          
          # Function to check for start command via Telegram
          check_telegram_start_messages() {
              if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
                  echo "‚ö†Ô∏è Telegram credentials not configured, skipping telegram check"
                  return 1
              fi
              
              # Get latest messages from Telegram (last 10 messages)
              response=$(curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?chat_id=${TELEGRAM_CHAT_ID}&limit=10&timeout=10")
              
              # Enhanced parsing - check for various start command formats
              if echo "$response" | grep -iE "(Start_rdp|start_rdp|START_RDP|start rdp|Start RDP)"; then
                  echo "üöÄ Start_rdp command received via Telegram!"
                  
                  # Send acknowledgment
                  send_telegram_notification "üöÄ *Start Command Received*\\n\\n‚úÖ Processing start request...\\nüîÑ Initializing RDP workflow\\n‚è≥ Please wait..."
                  return 0
              fi
              return 1
          }
          
          # Function to trigger Call RDP email workflow
          trigger_call_rdp_email() {
              echo "üîÅ Triggering Call RDP email workflow..."
              
              # Get the latest Call RDP email workflow run
              run_id=$(gh run list \
                --workflow "Call RDP email" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")

              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üîÅ Rerunning Call RDP email run ID: $run_id"
                  if gh run rerun $run_id --repo "${{ github.repository }}"; then
                      echo "‚úÖ Call RDP email workflow triggered successfully"
                      send_telegram_notification "üöÄ *RDP Workflow Started*\\n\\n‚úÖ Call RDP email workflow triggered\\n‚úÖ RDP server setup initiated\\n\\nüìß *Next:* Wait for email with RDP credentials\\nüîó *Monitor:* [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
                      return 0
                  else
                      echo "‚ùå Failed to trigger Call RDP email workflow"
                      send_telegram_notification "‚ùå *RDP Workflow Failed*\\n\\n‚ùå Failed to trigger Call RDP email workflow\\n\\nüîß *Action:* Check [GitHub Actions logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\nüîÑ *Fallback:* Trying alternative startup method..."
                      return 1
                  fi
              else
                  echo "‚ùå No Call RDP email workflow found to rerun"
                  send_telegram_notification "‚ùå *RDP Workflow Not Found*\\n\\n‚ö†Ô∏è No Call RDP email workflow available\\n\\nüîß *Solution:* Try running workflows manually from [GitHub Actions](https://github.com/${{ github.repository }}/actions)"
                  return 1
              fi
          }
          
          # Send initial monitoring notification
          send_telegram_notification "üîç *RDP Monitor Active*\\n\\n‚úÖ Listening for start commands\\n‚è∞ Monitor duration: 6 hours\\n\\nüì± *To start RDP:*\\n‚Ä¢ Send \\`Start_rdp\\` to this chat\\n‚Ä¢ Various formats accepted\\n\\nüö´ *To stop monitoring:*\\n‚Ä¢ Cancel this workflow manually"
          
          # Main monitoring loop - check every 30 seconds for 6 hours
          end_time=$(($(date +%s) + 21600))  # 6 hours from now
          check_interval=30  # 30 seconds between checks
          
          while [ $(date +%s) -lt $end_time ]; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "üì≤ Monitor heartbeat: $current_time"
              
              # Check for start command
              if check_telegram_start_messages; then
                  echo "üöÄ Start command detected - triggering RDP workflows"
                  if trigger_call_rdp_email; then
                      echo "üèÅ RDP workflow started successfully"
                      exit 0  # Success - RDP started
                  else
                      echo "‚ùå Failed to trigger RDP workflows, continuing monitoring..."
                      send_telegram_notification "‚ùå *RDP Start Failed*\\n\\n‚ö†Ô∏è Failed to start RDP workflow\\nüîÑ Continuing to monitor for retry\\n\\nüì± Send \\`Start_rdp\\` again to retry"
                  fi
              fi
              
              # Wait before next check
              echo "‚è≥ Waiting $check_interval seconds before next check..."
              sleep $check_interval
          done
          
          echo "‚è∞ 6-hour monitoring period completed without start command"
          send_telegram_notification "‚è∞ *RDP Monitor Timeout*\\n\\n‚ÑπÔ∏è 6-hour monitoring period completed\\n‚ùå No start command received\\nüö´ Monitor session ended\\n\\nüîÑ *To restart monitoring:*\\n‚Ä¢ Run this workflow again manually"

      - name: Fallback - Trigger on.yml workflow
        if: failure()  # Only run if start workflow failed
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÑ RDP trigger failed, triggering on.yml workflow as fallback"
          
          # Get the latest on.yml workflow run
          run_id=$(gh run list \
            --workflow "on" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")

          if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
              echo "üîÅ Rerunning on workflow run ID: $run_id"
              gh run rerun $run_id --repo "${{ github.repository }}"
              echo "‚úÖ on.yml workflow rerun triggered"
          else
              echo "‚ùå No on.yml workflow found to rerun"
          fi

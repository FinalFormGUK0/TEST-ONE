name: Stand by

on:
  workflow_dispatch:    # manual trigger

permissions:
  actions: write
  contents: read

jobs:
  standby-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout

    steps:
      - name: Monitor for Stop Signal
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          EMAIL_SMTP_USER: ${{ secrets.EMAIL_SMTP_USER }}
          EMAIL_SMTP_PASS: ${{ secrets.EMAIL_SMTP_PASS }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
        run: |
          echo "üîç Starting 6-hour standby monitoring for 'Stop_rdp' command"
          
          # Function to check for stop command via Telegram
          check_telegram_messages() {
              if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
                  echo "‚ö†Ô∏è Telegram credentials not configured, skipping telegram check"
                  return 1
              fi
              
              # Get latest messages from Telegram
              response=$(curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?chat_id=${TELEGRAM_CHAT_ID}&limit=10")
              
              # Check if any message contains "Stop_rdp"
              if echo "$response" | grep -q "Stop_rdp"; then
                  echo "üõë Stop_rdp command received via Telegram!"
                  return 0
              fi
              return 1
          }
          
          # Function to send email notification
          send_email_notification() {
              local subject="$1"
              local body="$2"
              
              if [ -z "$EMAIL_SMTP_USER" ] || [ -z "$EMAIL_SMTP_PASS" ]; then
                  echo "‚ö†Ô∏è Email credentials not configured, skipping email notification"
                  return 1
              fi
              
              echo "Sending email notification: $subject"
              local email_content="From: $EMAIL_FROM\nTo: $EMAIL_TO\nSubject: $subject\n\n$body"
              
              if curl -s --url 'smtps://smtp.gmail.com:465' \
                   --ssl-reqd \
                   --mail-from "$EMAIL_FROM" \
                   --mail-rcpt "$EMAIL_TO" \
                   --user "$EMAIL_SMTP_USER:$EMAIL_SMTP_PASS" \
                   -T <(echo -e "$email_content") > /dev/null 2>&1; then
                  echo "‚úÖ Email notification sent successfully"
                  return 0
              else
                  echo "‚ùå Failed to send email notification"
                  return 1
              fi
          }
          
          # Function to cancel RDP email workflow
          cancel_rdp_workflow() {
              echo "üö´ Attempting to cancel RDP email workflow..."
              
              # Get running RDP email workflow
              run_id=$(gh run list \
                --workflow "RDP email" \
                --repo "${{ github.repository }}" \
                --branch "${{ github.ref_name }}" \
                --status "in_progress" \
                --limit 1 \
                --json databaseId \
                --jq ".[0].databaseId")
              
              if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
                  echo "üõë Canceling RDP email run ID: $run_id"
                  if gh run cancel $run_id --repo "${{ github.repository }}"; then
                      echo "‚úÖ RDP workflow canceled successfully"
                      return 0
                  else
                      echo "‚ùå Failed to cancel RDP workflow"
                      send_email_notification "RDP Cancellation Failed" "Failed to cancel RDP email workflow (Run ID: $run_id). Manual intervention may be required."
                      return 1
                  fi
              else
                  echo "‚ÑπÔ∏è No running RDP email workflow found to cancel"
                  send_email_notification "RDP Workflow Not Found" "No running RDP email workflow found to cancel when Stop_rdp command was received. The workflow may have already completed or failed."
                  return 1
              fi
          }
          
          # Main monitoring loop - check every 10 minutes for 6 hours
          end_time=$(($(date +%s) + 21600))  # 6 hours from now
          
          while [ $(date +%s) -lt $end_time ]; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "üíì Standby heartbeat: $current_time"
              
              # Check for stop command
              if check_telegram_messages; then
                  echo "üõë Stop command detected - canceling RDP and exiting"
                  cancel_rdp_workflow
                  
                  # Trigger Start whole WorkFlow when Stop_rdp is received
                  echo "üîÅ Triggering Start whole WorkFlow after Stop_rdp command"
                  start_workflow_run_id=$(gh run list \
                    --workflow "Start whole WorkFlow" \
                    --repo "${{ github.repository }}" \
                    --branch "${{ github.ref_name }}" \
                    --limit 1 \
                    --json databaseId \
                    --jq ".[0].databaseId")
                  
                  if [ "$start_workflow_run_id" != "null" ] && [ -n "$start_workflow_run_id" ]; then
                      echo "üîÅ Rerunning Start whole WorkFlow run ID: $start_workflow_run_id"
                      gh run rerun $start_workflow_run_id --repo "${{ github.repository }}"
                      echo "‚úÖ Start whole WorkFlow rerun triggered after Stop_rdp"
                  else
                      echo "‚ö†Ô∏è No Start whole WorkFlow found to rerun"
                  fi
                  
                  echo "üèÅ Standby monitoring stopped by user command"
                  exit 0
              fi
              
              # Wait 10 minutes before next check
              echo "‚è≥ Waiting 10 minutes before next check..."
              sleep 600
          done
          
          echo "‚è∞ 6-hour monitoring period completed without stop command"

      - name: Rerun Call RDP email workflow
        if: success()  # Only run if no stop command was received
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÑ No stop command received, rerunning Call RDP email workflow"
          
          # Get the latest Call RDP email workflow run
          run_id=$(gh run list \
            --workflow "Call RDP email" \
            --repo "${{ github.repository }}" \
            --branch "${{ github.ref_name }}" \
            --limit 1 \
            --json databaseId \
            --jq ".[0].databaseId")

          if [ "$run_id" != "null" ] && [ -n "$run_id" ]; then
              echo "üîÅ Rerunning Call RDP email run ID: $run_id"
              gh run rerun $run_id --repo "${{ github.repository }}"
              echo "‚úÖ Call RDP email workflow rerun triggered"
          else
              echo "‚ùå No Call RDP email workflow found to rerun"
              exit 1
          fi